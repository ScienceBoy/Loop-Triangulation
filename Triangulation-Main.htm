<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
  </head>
  <body>
    <!-- Setup the JavaScript canvas to draw the points and triangles -->
    <canvas id="Canvas" style="width: 100%; height: 100%; border: 0px"> </canvas>
    <script src="Delaunay Triangulation & Flipping\Delaunay-Triangulations-Flipping.js"></script>
    <script src="PunkteViaMittelpunktTriangulieren.js"></script>
    <script src="Loop Triangulation\Loop Triangulation API.js"></script>
    <script>
      // Setup the canvas drawing context
      var canvas = document.getElementById("Canvas");
      var rect = canvas.getBoundingClientRect();
      canvas.width = rect.width;
      canvas.height = rect.height;
      var DrawingContext = canvas.getContext("2d");
      DrawingContext.scale(1, 1);

      // Function to draw text on the canvas
      function drawText(x, y, text, DrawingContext, color, textAlign) {
        DrawingContext.fillStyle = color;
        DrawingContext.lineWidth = 1;
        DrawingContext.font = "12px Arial";
        DrawingContext.textAlign = textAlign;
        DrawingContext.fillText(text, x, y);
      }

      // Function to draw a circle on the canvas
      function drawCircle(x, y, r, startAngle, endAngle, thickness, DrawingContext, color, fill) {
        var pi = 3.1415;
        DrawingContext.beginPath();
        DrawingContext.fillStyle = color;
        DrawingContext.strokeStyle = color;
        DrawingContext.lineWidth = thickness;
        DrawingContext.arc(x, y, r, (startAngle / 360) * 2 * pi, (endAngle / 360) * 2 * pi);
        DrawingContext.stroke();
        if (fill == true) {
          DrawingContext.fill();
        }
      }

      // Function to draw a line on the canvas
      function drawLine(x1, y1, x2, y2, thickness, DrawingContext, color) {
        DrawingContext.beginPath();
        DrawingContext.strokeStyle = color;
        DrawingContext.lineWidth = thickness;
        DrawingContext.moveTo(x1, y1);
        DrawingContext.lineTo(x2, y2);
        DrawingContext.stroke();
      }

      // Function to calculate the distance between two points (x1, y1) and (x2, y2)
      function Distance(x1, y1, x2, y2) {
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
      }

      // Function to draw all points onto the canvas
      function drawPoints() {
        for (var x25 = 0; x25 < points.length; x25++) {
          drawCircle(points[x25].x + 400, points[x25].y + 400, 2, 0, 360, 1, DrawingContext, "#FF0000", true);
        }

        for (var x25 = 0; x25 < points.length; x25++) {
          drawCircle(points[x25].x + 400, points[x25].z, 2, 0, 360, 1, DrawingContext, "#FF0000", true);
        }

        for (var x25 = 0; x25 < points.length; x25++) {
          drawCircle(points[x25].y, points[x25].z, 2, 0, 360, 1, DrawingContext, "#FF0000", true);
        }
      }

      // Function to draw triangles onto the canvas
      function drawTriangles() {
        // if (number == -1) {
        DrawingContext.clearRect(0, 0, canvas.width, canvas.height);
        // }
        for (var x25 = 0; x25 < triangles.length; x25++) {
          // Top view
          drawLine(points[triangles[x25].P1].x + 400, points[triangles[x25].P1].y, points[triangles[x25].P2].x + 400, points[triangles[x25].P2].y, 1, DrawingContext, "#000000");
          drawLine(points[triangles[x25].P2].x + 400, points[triangles[x25].P2].y, points[triangles[x25].P3].x + 400, points[triangles[x25].P3].y, 1, DrawingContext, "#000000");
          drawLine(points[triangles[x25].P3].x + 400, points[triangles[x25].P3].y, points[triangles[x25].P1].x + 400, points[triangles[x25].P1].y, 1, DrawingContext, "#000000");

          // Front view
          drawLine(points[triangles[x25].P1].x + 400, points[triangles[x25].P1].z + 400, points[triangles[x25].P2].x + 400, points[triangles[x25].P2].z + 400, 1, DrawingContext, "#000000");
          drawLine(points[triangles[x25].P2].x + 400, points[triangles[x25].P2].z + 400, points[triangles[x25].P3].x + 400, points[triangles[x25].P3].z + 400, 1, DrawingContext, "#000000");
          drawLine(points[triangles[x25].P3].x + 400, points[triangles[x25].P3].z + 400, points[triangles[x25].P1].x + 400, points[triangles[x25].P1].z + 400, 1, DrawingContext, "#000000");

          // Side view
          drawLine(points[triangles[x25].P1].y, points[triangles[x25].P1].z + 400, points[triangles[x25].P2].y, points[triangles[x25].P2].z + 400, 1, DrawingContext, "#000000");
          drawLine(points[triangles[x25].P2].y, points[triangles[x25].P2].z + 400, points[triangles[x25].P3].y, points[triangles[x25].P3].z + 400, 1, DrawingContext, "#000000");
          drawLine(points[triangles[x25].P3].y, points[triangles[x25].P3].z + 400, points[triangles[x25].P1].y, points[triangles[x25].P1].z + 400, 1, DrawingContext, "#000000");        }
      }

      // Main program, starting by defining the number of points and the recursion depth
      var NumberOfPoints = 4;
      var Depth = 10;
      var triangles = [];
      var points = [];

      // Call function to create the random points
      points = CreatePoints(NumberOfPoints); // NumberOfPoints is only considered for randomly distributed points in the function CreatePoints
      drawPoints();
      triangles = CreateTriangles();
      drawTriangles();

      // Repeat steps for each depth level
      for (var depthLevel = 1; depthLevel < Depth; depthLevel++) {
        // When do we start?
        const startTime = Date.now();

        // Apply Porath Triangulation
        //PorathTriangulation(points, triangles);

        // Apply Delaunay-Flipping
        if (depthLevel == 1) {
          //DelaunayFlipping(points_x, points_y, triangles_Corner1, triangles_Corner2, triangles_Corner3, (NumberToStop = 10000));
        }

        // Apply Loop subdivision
        var result = loopSubdivision(points, triangles);
        triangles = result.triangles;
        points = result.points;

        // Show triangles and statistics
        drawTriangles();
        drawText(20, depthLevel * 20 + 20, "Number of Triangles after recursion " + depthLevel + ": " + triangles.length, DrawingContext, "#000000", "Left");
        console.log("Level: ", depthLevel, "   Time used: ", (Date.now() - startTime) / 1000, "s");
      }

      // Function to create the points randomly in 2d
      function CreatePoints(NumberOfNewPoints) {
        var pointlist = [];
        // A 3d T-shaped object
        pointlist.push({ x: 0, y: 0, z: 0 }); // 0
        pointlist.push({ x: 50, y: 150, z: 50 }); //	1
        pointlist.push({ x: 50, y: 150, z: 150 }); //	2
        pointlist.push({ x: 50, y: 250, z: 50 }); //	3
        pointlist.push({ x: 50, y: 250, z: 150 }); //	4

        pointlist.push({ x: 150, y: 50, z: 50 }); //	5
        pointlist.push({ x: 150, y: 50, z: 150 }); //	6
        pointlist.push({ x: 150, y: 150, z: 50 }); //	7
        pointlist.push({ x: 150, y: 150, z: 150 }); //	8

        pointlist.push({ x: 150, y: 250, z: 50 }); //	9
        pointlist.push({ x: 150, y: 250, z: 150 }); //	10
        pointlist.push({ x: 250, y: 50, z: 50 }); //	11
        pointlist.push({ x: 250, y: 50, z: 150 }); //	12

        pointlist.push({ x: 250, y: 150, z: 50 }); //	13
        pointlist.push({ x: 250, y: 150, z: 150 }); //	14
        pointlist.push({ x: 250, y: 250, z: 50 }); //	15
        pointlist.push({ x: 250, y: 250, z: 150 }); //	16

        pointlist.push({ x: 350, y: 150, z: 50 }); //	17
        pointlist.push({ x: 350, y: 150, z: 150 }); //	18
        pointlist.push({ x: 350, y: 250, z: 50 }); //	19
        pointlist.push({ x: 350, y: 250, z: 150 }); //	20

        return pointlist;
      }

      // Function to create triangles for the given points
      function CreateTriangles() {
        var trianglelist = [];
        // A 3d T-shaped object
        trianglelist.push({ P1: 5, P2: 11, P3: 12 });
        trianglelist.push({ P1: 5, P2: 12, P3: 6 });
        trianglelist.push({ P1: 11, P2: 13, P3: 12 });
        trianglelist.push({ P1: 13, P2: 14, P3: 12 });
        trianglelist.push({ P1: 7, P2: 5, P3: 6 });
        trianglelist.push({ P1: 7, P2: 6, P3: 8 });
        trianglelist.push({ P1: 6, P2: 12, P3: 8 });
        trianglelist.push({ P1: 12, P2: 14, P3: 8 });
        trianglelist.push({ P1: 5, P2: 11, P3: 7 });
        trianglelist.push({ P1: 11, P2: 13, P3: 7 });
        trianglelist.push({ P1: 1, P2: 7, P3: 8 });
        trianglelist.push({ P1: 1, P2: 8, P3: 2 });
        trianglelist.push({ P1: 3, P2: 1, P3: 2 });
        trianglelist.push({ P1: 3, P2: 2, P3: 4 });
        trianglelist.push({ P1: 9, P2: 3, P3: 4 });
        trianglelist.push({ P1: 9, P2: 4, P3: 10 });
        trianglelist.push({ P1: 2, P2: 8, P3: 10 });
        trianglelist.push({ P1: 2, P2: 10, P3: 4 });
        trianglelist.push({ P1: 1, P2: 7, P3: 9 });
        trianglelist.push({ P1: 1, P2: 9, P3: 3 });

        trianglelist.push({ P1: 8, P2: 14, P3: 16 });
        trianglelist.push({ P1: 8, P2: 16, P3: 10 });
        trianglelist.push({ P1: 7, P2: 13, P3: 15 });
        trianglelist.push({ P1: 7, P2: 15, P3: 9 });
        trianglelist.push({ P1: 15, P2: 9, P3: 10 });
        trianglelist.push({ P1: 15, P2: 10, P3: 16 });

        trianglelist.push({ P1: 13, P2: 18, P3: 14 });
        trianglelist.push({ P1: 13, P2: 17, P3: 18 });
        trianglelist.push({ P1: 17, P2: 19, P3: 20 });
        trianglelist.push({ P1: 17, P2: 20, P3: 18 });
        trianglelist.push({ P1: 14, P2: 18, P3: 20 });
        trianglelist.push({ P1: 14, P2: 20, P3: 16 });
        trianglelist.push({ P1: 15, P2: 16, P3: 20 });
        trianglelist.push({ P1: 15, P2: 20, P3: 19 });
        trianglelist.push({ P1: 13, P2: 17, P3: 19 });
        trianglelist.push({ P1: 13, P2: 19, P3: 15 });

        return trianglelist;
      }
    </script>
  </body>
</html>
